// Generated by CoffeeScript 1.3.3
(function() {
  var FuncArgsParser, StepArgsParser, _ref;

  _ref = require('./args_parser'), StepArgsParser = _ref.StepArgsParser, FuncArgsParser = _ref.FuncArgsParser;

  this.FuncParser = (function() {

    function FuncParser(step_parser) {
      this.step_parser = step_parser;
      this.funcs = {};
      this.step_args = new StepArgsParser;
      this.func_args = new FuncArgsParser;
    }

    FuncParser.prototype.parse = function(line) {
      var _ref1, _ref2, _ref3;
      this.line = line;
      return (_ref1 = (_ref2 = (_ref3 = this.parse_body()) != null ? _ref3 : this.close()) != null ? _ref2 : this.parse_declaration()) != null ? _ref1 : this.parse_call();
    };

    FuncParser.prototype.parse_declaration = function() {
      if (this.is_declaration()) {
        return this.declare();
      }
    };

    FuncParser.prototype.parse_body = function() {
      if (this.is_step()) {
        return this.add_step();
      }
    };

    FuncParser.prototype.parse_call = function() {
      if (this.called()) {
        return this.inline();
      }
    };

    FuncParser.prototype.is_declaration = function() {
      return this.line.slice(-1) === ':';
    };

    FuncParser.prototype.is_step = function() {
      return (this.func != null) && this.line.slice(0, 2) === '  ';
    };

    FuncParser.prototype.declare = function() {
      return this.func = {
        name: this.func_args.normalized(this.line.slice(0, -1)),
        args_names: this.func_args.parse(this.line.slice(0, -1)),
        steps: []
      };
    };

    FuncParser.prototype.add_step = function() {
      return this.func.steps.push(this.line.slice(2));
    };

    FuncParser.prototype.close = function() {
      if (this.func != null) {
        this.funcs[this.func.name] = this.func;
        return this.func = void 0;
      }
    };

    FuncParser.prototype.called = function() {
      var name, _ref1, _ref2;
      name = this.step_args.normalized(this.line);
      this.called_func = (_ref1 = this.literal(name)) != null ? _ref1 : this.regex(name);
      return (_ref2 = this.called_func) != null ? _ref2.args_values = this.step_args.parse(this.line) : void 0;
    };

    FuncParser.prototype.literal = function(name) {
      return this.funcs[name];
    };

    FuncParser.prototype.regex = function(name) {
      var func;
      for (func in this.funcs) {
        if (name.match(func)) {
          return this.funcs[func];
        }
      }
    };

    FuncParser.prototype.inline = function() {
      var step, _i, _len, _ref1, _results;
      _ref1 = this.called_func.steps;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        step = _ref1[_i];
        _results.push(this.step_parser.parse(this.func_args.inline(step, this.called_func)));
      }
      return _results;
    };

    return FuncParser;

  })();

}).call(this);
