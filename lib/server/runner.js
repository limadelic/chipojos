// Generated by CoffeeScript 1.3.3
(function() {
  var MethodMatcher, Result,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MethodMatcher = require('./method_matcher').MethodMatcher;

  Result = require('./result').Result;

  this.Runner = (function() {

    function Runner() {
      this.exception = __bind(this.exception, this);
      this.method_matcher = new MethodMatcher;
      this.result = new Result;
    }

    Runner.prototype.run_steps = function(sut, steps) {
      var step, _i, _len;
      this.sut = sut;
      this.results = [];
      process.on('uncaughtException', this.exception);
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        step = steps[_i];
        this.run_step(step);
      }
      process.removeListener('uncaughtException', this.exception);
      return this.results;
    };

    Runner.prototype.run_step = function(step) {
      this.step = step;
      if (this.is_implemented() == null) {
        return this.missing();
      }
      try {
        if (this.is_async()) {
          this.sync.async_call();
        } else {
          this.sync_call();
        }
        return this.pass();
      } catch (e) {
        return this.fail(e);
      }
    };

    Runner.prototype.missing = function() {
      return this.record(this.result.missing(this.step));
    };

    Runner.prototype.pass = function() {
      return this.record(this.result.passed(this.step));
    };

    Runner.prototype.fail = function(e) {
      return this.record(this.result.failed(this.step, e));
    };

    Runner.prototype.record = function(result) {
      return this.results.push(result);
    };

    Runner.prototype.exception = function(e) {
      this.fail(e);
      return this.done();
    };

    Runner.prototype.is_implemented = function() {
      return this.method = this.method_matcher.match(this.sut, this.step.name);
    };

    Runner.prototype.is_async = function() {
      return this.method.length === this.step.args.length + 1;
    };

    Runner.prototype.sync_call = function() {
      return this.call(this.step.args);
    };

    Runner.prototype.async_call = function(done) {
      this.done = done;
      return this.call(this.step.args.concat([this.done]));
    };

    Runner.prototype.call = function(args) {
      return this.method.apply(this.sut, args);
    };

    return Runner;

  })();

}).call(this);
